Exploring correlations in a tidy R framework with corrr
========================================================
author: Dr Simon Jackson
date: January 13, 2017
autosize: true
css: custom.css
font-family: 'Arial'

Presented at rstudio::conf, 2017

[@drsimonj](https://twitter.com/drsimonj)

```{r setup, echo = F}
source("R/data-sim.R")
d <- simulate_data()
```

Motivation
========================================================
transition: none
incremental: true

As part of a national research project, I collected data from 1000 Australians about their:

**IQ**  
<img src="imgs/Homer_smart.jpg" height=400>

Motivation
========================================================
transition: none

As part of a national research project, I collected data from 1000 Australians about their:

**R skill**  
<img src="imgs/Homer_R.jpg" height=400>

Motivation
========================================================
transition: none

As part of a national research project, I collected data from 1000 Australians about their:

**Baldness**  
<img src="imgs/Homer_bald.jpg" height=400>

Motivation
========================================================
transition: none

As part of a national research project, I collected data from 1000 Australians about their:

```{r}
head(d, 3)
```

Motivation
========================================================

But exploring the correlations meant working with matrices...

```{r}
cor(d)
```

Motivation
========================================================

... when we have so many fantastic tools for working with data frames!

corrr
========================================================

**corrr** makes it easy to explore **corr**elations in **R** by helping to create and work with correlation data frames.

<img src="imgs/to-cord-df.png">

Using corrr
========================================================

Install from CRAN...

```{r, eval = F}
install.packages("corrr")
```

... or GitHub ...

```{r, eval = F}
install.packages("devtools")
devtools::install_github("drsimonj/corrr")
```

... and load

```{r}
library(corrr)
```

Create a correlation data frame  (tibble)
========================================================

```{r}
correlate(d)
```

Bonus: pairwise deletion used.  
No more `use = "pairwise.complete.obs`"

Leverage the tidyverse
========================================================

```{r}
# dplyr is loaded with corrr

correlate(d) %>% 
  select(rowname, contains("_1")) %>% 
  filter(bald_1 > 0)
```

What else?
========================================================

Other corrr functions support routine exploration.

Examples...

Get visual
========================================================

```{r network_plot, fig.width = 6, fig.height = 5, fig.align="center"}
correlate(d) %>% network_plot()
```

Get fashionable
========================================================

```{r}
correlate(d) %>% fashion()
```

Find patterns
========================================================

```{r rearrange, fig.width = 6, fig.height = 5, fig.align="center"}
correlate(mtcars) %>% rearrange() %>% rplot()
```

Did I mention the tidyverse?
========================================================

```{r ggplot, fig.width = 8, fig.height = 5, fig.align="center", message = F}
library(ggplot2)
correlate(d) %>% focus(bald_1) %>%
  mutate(rowname = reorder(rowname, bald_1)) %>% 
  ggplot(aes(rowname, bald_1, fill = bald_1)) +
    geom_col() + coord_flip() + guides(fill = "none") + 
    labs(x = NULL, y = "Correlation with bald_1") + theme_minimal()
```

Sign off
========================================================

Thank you!

And thanks to RStudio for having me.

[@drsimonj](https://twitter.com/drsimonj)

[github.com/drsimonj](https://github.com/drsimonj)